#!/bin/sh

. "/mnt/SDCARD/.tmp_update/scripts/helperFunctions.sh"

INFO_DIR="/mnt/SDCARD/RetroArch/.retroarch/cores"
DEFAULT_IMG="/mnt/SDCARD/Themes/SPRUCE/icons/ports.png"

FLAG_FILE="/mnt/SDCARD/.tmp_update/flags/gs.lock"
LIST_FILE="/mnt/SDCARD/.tmp_update/flags/gs_list"
TEMP_FILE="/mnt/SDCARD/.tmp_update/flags/gs_list_temp"
LONG_PRESSED=false

long_press_handler() {

    # set flag for long pressed event
    LONG_PRESSED=false
    sleep 2
    LONG_PRESSED=true

    # ensure command file exists
    if [ ! -f /tmp/cmd_to_run.sh ] ; then
        log_message "cmd_to_run.sh does not exist!"
        return
    fi

    # get game path and box art path
    CMD=`cat /tmp/cmd_to_run.sh`
    GAME_PATH=`echo $CMD | cut -d\" -f4`
    BOX_ART_PATH="$(dirname "$GAME_PATH")/Imgs/$(basename "$GAME_PATH" | sed 's/\.[^.]*$/.png/')"
    log_message "Box art path is $BOX_ART_PATH"
    
    GAME="${GAME_PATH##*/}" #      get game name without the full path
    LAUNCH="$(echo "$CMD" | awk '{print $1}' | tr -d '"')"
    EMU_DIR="${LAUNCH%/*}"
	OVR_DIR="$EMU_DIR/overrides"
	OVERRIDE="$OVR_DIR/$GAME.opt"
	. "$EMU_DIR/default.opt"
	. "$EMU_DIR/system.opt"
    if [ -f "$OVERRIDE" ]; then
        . "$OVERRIDE"
    fi
    core_info="$INFO_DIR/${CORE}_libretro.info"
    core_name="$(awk -F' = ' '/corename/ {print $2}' "$core_info")"
    core_name="$(echo ${core_name} | tr -d '"')"
    state_dir="/mnt/SDCARD/Saves/states/$core_name"
    game_shortname="${GAME%.*}"
    SCREENSHOT_PATH="${state_dir}/${game_shortname}.state.auto.png"
    log_message "Screenshot path is $SCREENSHOT_PATH"

    # ensure box art or screenshot file exists
    if [ ! -f "$BOX_ART_PATH" ] && [ ! -f "$SCREENSHOT_PATH" ] && [ ! -f "$DEFAULT_IMG" ]; then
        log_message "no box art, screenshot, or default image for current game!"
        return 1
    fi

    # update switcher game list
    if [ -f "$LIST_FILE" ] ; then
        # if game list file exists
        # get all commands except the current game
        grep -Fxv "$CMD" "$LIST_FILE" > "$TEMP_FILE"
        mv "$TEMP_FILE" "$LIST_FILE"
        # append the command for current game to the end of game list file 
        echo "$CMD" >> "$LIST_FILE"
    else
        # if game list file does not exist
        # put command to new game list file
        echo "$CMD" > "$LIST_FILE"
    fi

    # makesure all emulators and games in list exist
    # remove all non existing games from list file
    rm -f "$TEMP_FILE"
    while read -r CMD; do
        EMU_PATH=`echo $CMD | cut -d\" -f2`
        GAME_PATH=`echo $CMD | cut -d\" -f4`
        if [ ! -f "$EMU_PATH" ] ; then continue ; fi
        if [ ! -f "$GAME_PATH" ] ; then continue ; fi
        echo "$CMD" >> "$TEMP_FILE"
    done <$LIST_FILE
    mv "$TEMP_FILE" "$LIST_FILE"

    # trim the game list to only recent 10 games
    tail -10 "$LIST_FILE" > "$TEMP_FILE"
    mv "$TEMP_FILE" "$LIST_FILE"

    # kill RA or other emulator 
    killall -15 retroarch || killall -15 ra32.miyoo || /mnt/SDCARD/miyoo/app/kill_apps.sh
    
    # set flag file for principal.sh to load game switcher later
    touch "$FLAG_FILE" && log_message "creating game switcher flag file"
}

# listen to log file and handle key press events
# the keypress logs are generated by keymon
tail -F -n 1 /var/log/messages | while read line; do
    case $line in
        *"key 1 28 1"*) # START key down
            # start long press handler
            log_message "game switcher watchdog: Start button pressed"
            long_press_handler &
            PID=$!
        ;;
        *"key 1 28 0"*) # START key up
            # kill the long press handler if menu button is released within time limit
            if [ "$LONG_PRESSED" = false ] ; then
                log_message "game switcher watchdog: Start button released."
                kill $PID
            fi
        ;;
    esac
done 
