#!/bin/sh

. "/mnt/SDCARD/.tmp_update/scripts/helperFunctions.sh"

FLAG_FILE="/mnt/SDCARD/.tmp_update/flags/gs.lock"
LIST_FILE="/mnt/SDCARD/.tmp_update/flags/gs_list"

INFO_DIR="/mnt/SDCARD/RetroArch/.retroarch/cores"
DEFAULT_IMG="/mnt/SDCARD/Themes/SPRUCE/icons/ports.png"
ARGS="0 36 bottom middle 600 ff ff ff"

# remove flag for game switcher
rm "$FLAG_FILE" && log_message "Removed game switcher flag file"

# exit if no game in list file
if [ ! -f "$LIST_FILE" ] ; then
    log_message "no games in the game switcher list! Exiting game switcher!"
    exit 0
fi

# get the index of current displayed game
CURRENT_INDEX=`wc -l < "$LIST_FILE"`
MAX_INDEX=$CURRENT_INDEX
log_message "Current index is $CURRENT_INDEX out of $MAX_INDEX"

# get the command to run the current game
CMD=`tail -n+$CURRENT_INDEX "$LIST_FILE" | head -1`
log_message "Game switcher command to run: $CMD"

# function to show box art of current selected game
show_box_art() {
    # get the command, game path and box art path of current selected game
    CMD=`tail -n+$CURRENT_INDEX "$LIST_FILE" | head -1`
    GAME_PATH=`echo $CMD | cut -d\" -f4`
    GAME="${GAME_PATH##*/}" #      get game name without the full path
    game_shortname="${GAME%.*}" #     get game without file extension
    BOX_ART_PATH="$(dirname "$GAME_PATH")/Imgs/$(basename "$GAME_PATH" | sed 's/\.[^.]*$/.png/')"
    log_message "Box art path is $BOX_ART_PATH"

    # show the box art
    if [ -f "$BOX_ART_PATH" ]; then
        kill $SHOW_PID
        /mnt/SDCARD/.tmp_update/bin/display_text.elf "$BOX_ART_PATH" "$game_shortname" $ARGS &
        log_message "Showing box art."
        SHOW_PID=$!
    else
        log_message "Box art not found. Attempting to show default image."
        return 1
    fi
}

show_screenshot() {
    # get the command, game path and auto save state screenshot path of current selected game
    CMD=`tail -n+$CURRENT_INDEX "$LIST_FILE" | head -1`
    GAME_PATH=`echo $CMD | cut -d\" -f4`
    GAME="${GAME_PATH##*/}" #      get game name without the full path
    LAUNCH="$(echo "$CMD" | awk '{print $1}' | tr -d '"')"
    EMU_DIR="${LAUNCH%/*}"
	OVR_DIR="$EMU_DIR/overrides"
	OVERRIDE="$OVR_DIR/$GAME.opt"
	. "$EMU_DIR/default.opt"
	. "$EMU_DIR/system.opt"
    if [ -f "$OVERRIDE" ]; then
        . "$OVERRIDE"
        log_message "per-game launch override file found at $OVERRIDE"
    fi
    log_message "launch settings for $GAME parsed"
    log_message "CORE is $CORE"
    core_info="$INFO_DIR/${CORE}_libretro.info"
    core_name="$(awk -F' = ' '/corename/ {print $2}' "$core_info")"
    core_name="$(echo ${core_name} | tr -d '"')"
    state_dir="/mnt/SDCARD/Saves/states/$core_name"
    game_shortname="${GAME%.*}"
    SCREENSHOT_PATH="${state_dir}/${game_shortname}.state.auto.png"
    log_message "Screenshot path is $SCREENSHOT_PATH"

    # show the auto save state screenshot
    if [ -f "$SCREENSHOT_PATH" ]; then
        kill $SHOW_PID
        /mnt/SDCARD/.tmp_update/bin/display_text.elf "$SCREENSHOT_PATH"  "$game_shortname" $ARGS&
        log_message "Showing screenshot."
        SHOW_PID=$!
    else
        log_message "Screenshot not found. Attempting to show box art."
        return 1
    fi
}

show_default() {
    if [ -f "$DEFAULT_IMG" ]; then
        kill $SHOW_PID
        /mnt/SDCARD/.tmp_update/bin/display_text.elf "$DEFAULT_IMG"  "$game_shortname" $ARGS&
        log_message "Showing default image."
        SHOW_PID=$!
    else
        log_message "Default image also not found. WTF bro."
        return 1
    fi
}

# show the screenshot or box art of the last game played
show_screenshot || show_box_art || show_default

# listen to log file and handle key press events
# the keypress logs are generated by keymon
tail -F -n 1 /var/log/messages | while read line; do
    case $line in
        *"key 1 57 1"*) # A key down
            # store the command to tmp file, which is used for principle.sh to load the game
            log_message "game switcher: Button A pressed."
            echo $CMD > /tmp/cmd_to_run.sh
            sync
            # exit the game switcher
            # killall is necessary because the loop gives 2 processes in the name gameswitcher.sh
            killall gameswitcher.sh
        ;;
        *"key 1 29 1"*) # B key down
            # exit the game switcher
            # killall is necessary because the loop gives 2 processes in the name gameswitcher.sh
            log_message "game switcher: Button B pressed."
            killall gameswitcher.sh
        ;;
        *"key 1 105 1"*) # LEFT key down
            # update the index of current selected game
            log_message "game switcher: D-pad Left pressed."
            CURRENT_INDEX=`expr $CURRENT_INDEX - 1`
            if [ $CURRENT_INDEX -lt 1 ] ; then CURRENT_INDEX=$MAX_INDEX ; fi
            # show the screenshot or box art of new selected game
            show_screenshot || show_box_art || show_default
        ;;
        *"key 1 106 1"*) # RIGHT key down
            # update the index of current selected game
            log_message "game switcher: D-pad Right pressed."
            CURRENT_INDEX=`expr $CURRENT_INDEX + 1`
            if [ $CURRENT_INDEX -gt $MAX_INDEX ] ; then CURRENT_INDEX=1 ; fi
            # show the screenshot or box art of new selected game
            show_screenshot || show_box_art || show_default
        ;;
    esac
done 
